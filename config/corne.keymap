/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mod";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <250>;
            flavor = "tap-preferred";
        };

        tdesc: tdesc {
            compatible = "zmk,behavior-tap-dance";
            label = "Tap Dance Escape";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp ESCAPE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans  &tdesc          &kp W       &kp E        &kp R             &kp T      &kp Y    &kp U            &kp I        &kp O       &kp P          &trans
&trans  &hm LEFT_GUI A  &hm LALT S  &hm LCTRL D  &hm LEFT_SHIFT F  &kp G      &kp H    &hm RSHIFT J     &hm RCTRL K  &hm RALT L  &hm RGUI SEMI  &trans
&trans  &kp Z           &kp X       &kp C        &kp V             &kp B      &kp N    &kp M            &kp COMMA    &kp DOT     &kp FSLH       &trans
                                    &trans       &lt 1 SPACE       &kp TAB    &kp RET  &lt 2 BACKSPACE  &trans
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1            &kp N2            &kp N3            &kp N4            &kp N5        &trans    &trans          &trans                &trans     &trans  &trans
&trans  &kp N6            &kp N7            &kp N8            &kp N9            &kp N0        &kp LEFT  &kp DOWN        &kp UP                &kp RIGHT  &trans  &trans
&trans  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(N5)    &trans    &kp LG(LS(N3))  &kp LG(LS(NUMBER_4))  &trans     &trans  &trans
                                            &trans            &trans            &kp SPACE     &kp RET   &trans          &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL   &kp AT         &kp HASH   &kp DLLR              &kp PRCNT                &kp MINUS       &kp EQUAL               &kp LBKT           &kp RBKT                    &kp BSLH               &trans
&trans  &kp CARET  &kp AMPERSAND  &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp UNDERSCORE  &kp PLUS                &kp LEFT_BRACE     &kp RIGHT_BRACE             &kp PIPE               &trans
&trans  &trans     &trans         &trans     &trans                &trans                   &trans          &kp LG(LA(LEFT_ARROW))  &kp LA(LG(RIGHT))  &kp LG(LC(LA(LEFT_ARROW)))  &kp LA(LG(LC(RIGHT)))  &trans
                                  &trans     &trans                &kp SPACE                &kp RET         &trans                  &trans
            >;
        };
    };
};
